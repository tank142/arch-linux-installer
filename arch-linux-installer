#! /bin/bash
setfont UniCyr_8x16 2>/dev/null
EXIT()
{
	if [[ $1 != 0 ]]
	then
		echo "ERROR $1"
		exit $1
	fi
}
EXITmenu()
{
	case $? in
		0)
			return 0
		;;
		1)
			return 1
		;;
		*)
			echo "ERROR $1"
			exit $1
		;;
	esac
}
#Фиксы размеров для сраного диалога
H()
{
	resize >> /dev/null
	H=$(( $LINES - $1 ))
}
L(){
	L=$(( ( $2 + 1 ) / 2 ))
	if (( $L > 3 ));then
		L=$(( $L - $1 ))
	else
		L=1
	fi
}
Lc(){
	L=$(( ( $2 + 1 ) / 3 ))
	if (( $L > 3 ));then
		L=$(( $L - $1 ))
	else
		L=1
	fi
}
#---------------------------------------------------------
LOCALE()
{
	local i=0 l=( `ls /usr/share/i18n/locales` ) H
	for f in ${l[@]}
	do
		for ((X=0; X < "${#LOCALES[@]}"; X++))
		do
			if [[ "$f" == "${LOCALES[$X]}" ]];then
				locales[i]="$f";((i++))
				locales[i]="";((i++))
				locales[i]="ON";((i++))
			fi
		done
	done
	for f in ${l[@]}
	do
		for ((X=0; X < "${#locales[@]}"; X++))
		do
			if [[ "$f" == "${LOCALES[$X]}" ]];then
				continue
			fi
		done
		locales[i]="$f";((i++))
		locales[i]="";((i++))
		locales[i]="";((i++))
	done
	H 6
	L 2 "${#locales[@]}"
	locales=( $($INTERFACE --backtitle "$BACKTITLE" --title "locales" --checklist "" $H 0 $L "${locales[@]}" 3>&1 1>&2 2>&3) ); EXITmenu $?
	i=0
	for ((X=0; X < "${#locales[@]}"; X++))
	do
		if [[ "$LOCALE" == "${locales[$X]}" ]];then
			locale[i]="${locales[$X]}";((i++))
			locale[i]="";((i++))
			break
		fi
	done
	for ((X=0; X < "${#locales[@]}"; X++))
	do
		if [[ "$LOCALE" != "${locales[$X]}" ]];then
			locale[i]="${locales[$X]}";((i++))
			locale[i]="";((i++))
		fi
	done
	L 2 "${#locale[@]}"
	locale=$($INTERFACE --backtitle "$BACKTITLE" --title " Локали " --menu "Выбор основной локали" 0 0 $L "${locale[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
	rm -f /etc/locale.gen /etc/locale.conf /etc/vconsole.conf
	for ((X=0; X < "${#locales[@]}"; X++))
	do
		echo "${locales[$X]}.UTF-8 UTF-8" >> /etc/locale.gen; EXIT $?
	done
	$INTERFACE --prgbox "locale-gen" "locale-gen" -1 -1; EXIT $?
	echo "LANG=$locale.UTF-8" >> /etc/locale.conf
	if [[ "$locale" == *ru* || "$locale" == *RU* ]];then
		echo 'FONT="cyr-sun16"
CONSOLEFONT="cyr-sun16"' >> /etc/vconsole.conf; EXIT $?
	fi
}
#---------------------------------------------------------
[ALLBLK]()
{
	$INTERFACE --backtitle "$BACKTITLE" --title " Редактор разделов " --msgbox "`lsblk -D -f -n -o NAME,SIZE,MODEL,FSTYPE,FSUSE%,MOUNTPOINT`" 0 0
}
BLK(){
	local i=$1
	for f in $(find /dev -maxdepth 1 -name "md*" -type b -printf "%f\n" | sort -V)
	do
		menu[i]="$f";((i++))
		menu[i]="`lsblk /dev/$f -n -o TYPE`";((i++))
	done
	for f in $(find /dev -maxdepth 1 -name "nvme*n*" -not -name "nvme*n*p*" -type b -printf "%f\n" | sort -V)
	do
		menu[i]="$f";((i++))
		menu[i]="`lsblk /dev/$f -n -o MODEL`";((i++))
	done
	for f in $(find /dev -maxdepth 1 -name "mmcblk*" -not -name "mmcblk*p*" -type b -printf "%f\n" | sort -V)
	do
		menu[i]="$f";((i++))
		menu[i]="`lsblk /dev/$f -n -o MODEL`";((i++))
	done
	for f in $(find /dev -maxdepth 1 -name "sd*" -not -name "sd*[0-9]" -type b -printf "%f\n" | sort -V)
	do
		menu[i]="$f";((i++))
		menu[i]="`lsblk /dev/$f -n -o MODEL`";((i++))
	done
}
BLKn(){
	local i=$1
	for f in $(find /dev -maxdepth 1 -name "md*" -type b -printf "%f\n" | sort -V)
	do
		menu[i]="$f";((i++))
		menu[i]="`lsblk /dev/$f -n -o FSTYPE,SIZE | head -n1`";((i++))
	done
	for f in $(find /dev -maxdepth 1 -name "nvme*n*" -type b -printf "%f\n" | sort -V)
	do
		menu[i]="$f";((i++))
		menu[i]="`lsblk /dev/$f -n -o FSTYPE,SIZE | head -n1`";((i++))
	done
	for f in $(find /dev -maxdepth 1 -name "mmcblk*" -type b -printf "%f\n" | sort -V)
	do
		menu[i]="$f";((i++))
		menu[i]="`lsblk /dev/$f -n -o FSTYPE,SIZE | head -n1`";((i++))
	done
	for f in $(find /dev -maxdepth 1 -name "sd*" -type b -printf "%f\n" | sort -V)
	do
		menu[i]="$f";((i++))
		menu[i]="`lsblk /dev/$f -n -o FSTYPE,SIZE | head -n1`";((i++))
	done
}
PARTED()
{
	BLK 2
	L 2 ${#menu[@]}
	local M
	M=$($INTERFACE --backtitle "$BACKTITLE" --title " Редактор разделов " --menu "`lsblk -D -M -f -n -o NAME,SIZE,MODEL,FSTYPE,FSUSE%,MOUNTPOINT`" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3)
	case $? in
		255)
			menu[0]="[ALLBLK]"
			menu[1]="Обзор носителей"
			M=$($INTERFACE --backtitle "$BACKTITLE" --title " Редактор разделов " --menu "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
			if [[ "$?" == 0 ]];then
				if [[ "$M" == '[ALLBLK]' ]];then
					[ALLBLK]
					PARTED
				else
					cfdisk /dev/"$M"
					PARTED
				fi
			fi
		;;
		*)
			return 1
		;;
		0)
			cfdisk /dev/"$M"; EXIT $?
			PARTED
		;;
	esac
}
#---------------------------------------------------------
SET_MOUNT_POINT(){
	M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --inputbox "$fstab_editor_mount_point" 8 100 "${MOUNT_POINT[$X]}" 3>&1 1>&2 2>&3); EXITmenu $?
	if [[ "$?" == 0 ]];then
		MOUNT_POINT[$X]="$M"
	fi
}
SET_PARTITION(){
	BLKn 2
	L 2 ${#menu[@]}
	menu[0]="$fstab_editor_overview"
	menu[1]=""
	menu[2]="$fstab_editor_setdir"
	menu[3]=""
	menu[4]="tmpfs"
	menu[5]=""
	M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --menu "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3);EXITmenu $?
	if [[ "$?" == 0 ]];then
		case $M in
			"$fstab_editor_overview")
				[ALLBLK]
				SET_PARTITION
			;;
			"$fstab_editor_setdir")
				M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --inputbox "$fstab_editor_mount_point" 8 100 "${MOUNT_POINT[$X]}" 3>&1 1>&2 2>&3); EXITmenu $?
				if [[ "$?" == 0 ]];then
					PARTITION[$X]="$M"
					FILESYSTEM[$X]="bind"
					unset FORMAT[$X]
				fi
			;;
			tmpfs)
				M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --inputbox "$fstab_editor_mount_point" 8 100 "${MOUNT_POINT[$X]}" 3>&1 1>&2 2>&3); EXITmenu $?
				if [[ "$?" == 0 ]];then
					MOUNT_POINT[$X]="$M"
					#FILESYSTEM[$X]="tmpfs"
					PARTITION[$X]="tmpfs"
					unset FORMAT[$X]
				fi
				
			;;
			*)
				PARTITION[$X]="$M"
				FILESYSTEM[$X]="`lsblk /dev/"${PARTITION[$X]}" -n -o FSTYPE | head -n1`"
				if [[ "`lsblk /dev/"${PARTITION[$X]}" -n --discard -o DISC-GRAN | head -n1`" != *"0B"* ]];then
					if [[ "${FILESYSTEM[$X]}" == "ext4" || "${FILESYSTEM[$X]}" == "ext2" || "${FILESYSTEM[$X]}" == "vfat" || "${FILESYSTEM[$X]}" == "btrfs" || "${FILESYSTEM[$X]}" == "jfs" || "${FILESYSTEM[$X]}" == "xfs" || "${FILESYSTEM[$X]}" == "f2fs" ]];then
						OPTIONS[$X]="$FS_OPTIONS,discard"
					else
						OPTIONS[$X]="$FS_OPTIONS"
					fi
				else
					OPTIONS[$X]="$FS_OPTIONS"
				fi
			;;
		esac
	fi
}
SET_FILESYSTEM(){
	if [[ "${FILESYSTEM[$X]}" != "bind" ]];then
		local menu i
		if ! [ -eL /usr/bin/mkfs.ext4 ]];then
			menu[i]="ext4";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.ext3 ]];then
			menu[i]="ext3";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.ext2 ]];then
			menu[i]="ext2";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.vfat ];then
			menu[i]="vfat";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.jfs ];then
			menu[i]="jfs";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.reiserfs ];then
			menu[i]="reiserfs";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.nilfs2 ];then
			menu[i]="nilfs";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.f2fs ];then
			menu[i]="f2fs";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.hfsplus ];then
			menu[i]="hfs";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.xfs ];then
			menu[i]="xfs";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.btrfs ];then
			menu[i]="btrfs";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.ntfs ];then
			menu[i]="ntfs";((i++))
			menu[i]="";((i++))
		fi
		if ! [ -eL /usr/bin/mkfs.exfat ];then
			menu[i]="exfat";((i++))
			menu[i]="";((i++))
		fi
		L 3 ${#menu[@]}
		M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --menu "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
		if [[ "$?" == "0" ]];then
			if [[ `lsblk /dev/"${PARTITION[$X]}" -n -o FSTYPE | head -n1` != $M ]];then
				FORMAT[$X]="1"
			fi
			FILESYSTEM[$X]="$M"
		fi
	fi
}
SET_FORMAT(){
	if [[ "${FILESYSTEM[$X]}" != "bind" ]];then
		if [[ "`lsblk /dev/"${PARTITION[$X]}" -n -o FSTYPE | head -n1`" == "${FILESYSTEM[$X]}" || "`lsblk /dev/"${PARTITION[$X]}" -n -o FSTYPE | head -n1`${FILESYSTEM[$X]}" == "ext4ext2" || "`lsblk /dev/"${PARTITION[$X]}" -n -o FSTYPE | head -n1`${FILESYSTEM[$X]}" == "ext2ext4" || "`lsblk /dev/"${PARTITION[$X]}" -n -o FSTYPE | head -n1`" == '' ]];then
			if [[ ${FORMAT[$X]} == "1" ]];then
				FORMAT[$X]="0"
			else
				FORMAT[$X]="1"
			fi
		else
			$INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --msgbox "$fstab_editor_filesystem_format_mount" 0 0
			FORMAT[$X]="1"
			return 0
		fi
	fi
}
SET_OPTIONS_TIME(){
	local menu i=0
	menu[0]="noatime"
	menu[1]=""
	menu[2]="atime"
	menu[3]=""
	menu[4]="norelatime"
	menu[5]=""
	menu[6]="relatime"
	menu[7]=""
	L 3 ${#menu[@]}
	M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --colors --menu "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
	if [[ "$?" == 0 ]];then
		time="$M"
	fi
}
SET_OPTIONS_DIRATIME(){
	local menu i=0
	menu[0]="nodiratime"
	menu[1]=""
	menu[2]="diratime"
	menu[3]=""
	L 3 ${#menu[@]}
	M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --colors --menu "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
	if [[ "$?" == 0 ]];then
		timedir="$M"
	fi
}
SET_OPTIONS_BTRFS_COMPRESS(){
	local menu i=0
	menu[0]="zlib"
	menu[1]=""
	menu[2]="lzo"
	menu[3]=""
	menu[4]="zstd"
	menu[5]=""
	menu[6]="no"
	menu[7]=""
	L 3 ${#menu[@]}
	M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --colors --menu "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
	if [[ "$?" == 0 ]];then
		btrfs_compress="$M"
	fi
}
SET_OPTIONS_TRIM(){
	if [[ "$discard" == "0" ]];then
		discard="1";((i++))
	else
		discard="0";((i++))
	fi
}
SET_OPTIONS(){
	local menu i=0
	menu[i]="$fstab_options_time";((i++))
	menu[i]="$time";((i++))
	menu[i]="$fstab_options_timedir";((i++))
	menu[i]="$timedir";((i++))
	if [[ "$OPTIONS[$X]" == 'btrfs' ]];then
		menu[i]="$fstab_options_compress";((i++))
		menu[i]="$btrfs_compress";((i++))
	fi
	menu[i]="TRIM:";((i++))
	if [[ "$discard" == 1 ]];then
		menu[i]="$fstab_editor_on";
	else
		menu[i]="$fstab_editor_off";
	fi
	L 3 ${#menu[@]}
	M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --colors --menu "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
	if [[ $? == "0" ]];then
		case $M in
			"$fstab_options_time")
				SET_OPTIONS_TIME
				SET_OPTIONS
			;;
			"$fstab_options_timedir")
				SET_OPTIONS_DIRATIME
				SET_OPTIONS
			;;
			"$fstab_options_compress")
				SET_OPTIONS_BTRFS_COMPRESS
				SET_OPTIONS
			;;
			"TRIM:")
				SET_OPTIONS_TRIM
				SET_OPTIONS
			;;
		esac
	fi
	OPTIONS[$X]="defaults"
	if [[ "$time" != '' ]];then
		OPTIONS[$X]="${OPTIONS[$X]},$time"
	fi
	if [[ "$time" != '' ]];then
		OPTIONS[$X]="${OPTIONS[$X]},$timedir"
	fi
	if [[ "$btrfs_compress" != '' ]];then
		OPTIONS[$X]="${OPTIONS[$X]},compress=$btrfs_compress"
	fi
	if [[ "$discard" == 1 ]];then
		OPTIONS[$X]="${OPTIONS[$X]},discard"
	fi	
}
SET_DUMP(){
	if [[ "${DUMP[$X]}" == "0" ]];then
		DUMP[$X]=1
	else
		DUMP[$X]=0
	fi
}
SET_PASS(){
	local menu
	menu[0]="0"
	menu[1]=""
	menu[2]="1"
	menu[3]=""
	menu[4]="2"
	menu[5]=""
	L 3 ${#menu[@]}
	M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --colors --menu "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
	if [[ $? == "0" ]];then
		PASS[$X]="$M"
	fi
}
FSTAB_EDITOR_ADD()
{
	local FSTAB_menu B=0
	if [[ "${FORMAT[$X]}" == "1" ]];then
		fstab_editor_='fstab_editor_on'
	else
		fstab_editor_='fstab_editor_off'
	fi
	FSTAB_menu[0]="$fstab_editor_partition"
	FSTAB_menu[1]="${PARTITION[$X]}"
	FSTAB_menu[2]="$fstab_editor_mount_point"
	FSTAB_menu[3]="${MOUNT_POINT[$X]}"
	if [[ "${FILESYSTEM[$X]}" != "bind" ]];then
		if [[ "${PARTITION[$X]}" != "tmpfs" ]];then
			FSTAB_menu[4]="$fstab_editor_filesystem"
			FSTAB_menu[5]="${FILESYSTEM[$X]}"
			FSTAB_menu[6]="$fstab_editor_filesystem_format"
			FSTAB_menu[7]="${!fstab_editor_}"
		fi
		FSTAB_menu[8]="$fstab_editor_options"
		FSTAB_menu[9]="${OPTIONS[$X]}"
		FSTAB_menu[10]="$fstab_editor_dump"
		FSTAB_menu[11]="${DUMP[$X]}"
		FSTAB_menu[12]="$fstab_editor_pass"
		FSTAB_menu[13]="${PASS[$X]}"
	fi
	if [[ ${FILESYSTEM[$X]} == "" ]];then
		((B++))
	fi
	if [[ ${MOUNT_POINT[$X]} == "" ]];then
		((B++))
	fi
	if [[ ${PARTITION[$X]} == "" ]];then
		((B++))
	fi
	if [[ "$B" == "0" ]];then
		FSTAB_menu[14]="$fstab_editor_complete"
		FSTAB_menu[15]=""
	fi
	L 3 ${#FSTAB_menu[@]}
	M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --colors --menu "" 0 0 $L "${FSTAB_menu[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
	case $? in
		0)
			case $M in
				"$fstab_editor_partition")
					SET_PARTITION
					FSTAB_EDITOR_ADD
				;;
				"$fstab_editor_mount_point")
					SET_MOUNT_POINT
					FSTAB_EDITOR_ADD
				;;
				"$fstab_editor_filesystem")
					SET_FILESYSTEM
					FSTAB_EDITOR_ADD
				;;
				"$fstab_editor_filesystem_format")
					SET_FORMAT
					FSTAB_EDITOR_ADD
				;;
				"$fstab_editor_options")
					case "${OPTIONS[$X]}" in
						*norelatime*)
							time="norelatime"
						;;
						*relatime*)
							time="relatime"
						;;
						*noatime*)
							time="noatime"
						;;
						*atime*)
							time="atime"
						;;
						*)
							time=""
						;;
					esac
					case "${OPTIONS[$X]}" in
						*noatime*)
							timedir="nodiratime"
						;;
						*atime*)
							timedir="diratime"
						;;
						*)
							timedir=""
						;;
					esac
					#BTRFS
					if [[ ${FILESYSTEM[$X]} == "btrfs" ]];then
						case "${OPTIONS[$X]}" in
							*compress=zlib*)
								compress="zlib"
							;;
							*compress=lzo*)
								compress="lzo"
							;;
							*compress=zstd*)
								compress="zstd"
							;;
							*compress=no*)
								compress="no"
							;;
							*)
								compress=""
							;;
						esac
					fi
					if [[ ${OPTIONS[$X]} == *"discard"* ]];then
						discard='1'
					else
						discard='0'
					fi
					SET_OPTIONS
					FSTAB_EDITOR_ADD
				;;
				"$fstab_editor_dump")
					SET_DUMP
					FSTAB_EDITOR_ADD
				;;
				"$fstab_editor_pass")
					SET_PASS
					FSTAB_EDITOR_ADD
				;;
				"$fstab_editor_complete")
					X=0
				;;
			esac
		;;
		1)
			unset PARTITION[$X] MOUNT_POINT[$X] FILESYSTEM[$X] FORMAT[$X] OPTIONS[$X] DUMP[$X] PASS[$X] X
		;;
	esac
	case "${FILESYSTEM[$X]}" in
		bind)
			unset PASS[$X] DUMP[$X] OPTIONS[$X] FORMAT[$X]
		;;
		tmpfs)
			unset PASS[$X] DUMP[$X] OPTIONS[$X] FORMAT[$X]
		;;
	esac
}
FSTAB_EDITOR(){
	local i=2 A=0 menu I L=0
	menu[0]="A"
	menu[1]="$fstab_editor_add"
	for ((I=0; L < "${#PARTITION[@]}"; I++))
	do
		if [[ "${PARTITION[$I]}" != "" ]];then
			((L++))
			menu[i]="$I";((i++))
			menu[i]="${PARTITION[$I]} ${MOUNT_POINT[$I]} ${FILESYSTEM[$I]} ${OPTIONS[$I]} ${DUMP[$I]} ${PASS[$I]}";((i++))
		fi
	done
	L 3 ${#menu[@]}
	M=$($INTERFACE --backtitle "$BACKTITLE" --title "$fstab_editor" --menu "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
	if [[ "$?" == 0 ]];then
		case $M in
			"A")
				for ((x=0;; x++));do
					if [[ "${PARTITION[$x]}" == "" ]];then
						X="$x"
						break
					fi
				done
				DUMP[$X]="0"
				if [[ $X == "0" ]];then
					MOUNT_POINT[0]="/"
					FORMAT[0]="1"
					FILESYSTEM[0]="ext4"
					PASS[0]="1"
				else
					PASS[$X]="2"
				fi
				FSTAB_EDITOR_ADD
			;;
			*)
				X="$M"
				FSTAB_EDITOR_ADD
			;;
		esac
		FSTAB_EDITOR
	fi
}
export PARTITION MOUNT_POINT FILESYSTEM FORMAT OPTIONS DUMP PASS
#---------------------------------------------------------
LSGPU(){
	local A i=1
	for ((I=0;; I++))
	do
		A=`lspci | grep VGA | sed -n "$i"p`
		if [[ "$A" != "" ]];then
			GPU[$I]="$A";((i++))
		else
			break
		fi
	done
}
PKG_GPU_AUTO(){
	local nouveau_i i=0
	unset XF86_VIDEO_LIST
	GPU_DRIVERS=''
	for f in ${nvidia390[@]}
	do
		if [[ "${GPU[@]}" == *"$f"* ]];then
			nvidia390_i=1
			break
		fi
	done
	for f in ${nvidia[@]}
	do
		if [[ "${GPU[@]}" == *"$f"* ]];then
			nvidia_i=1
			break
		fi
	done
	if [[ "$nvidia390_i" == 1 ]];then
		for f in ${nvidia390_not_support[@]}
		do
			if [[ "${GPU[@]}" == *"$f"* ]];then
					nvidia_i=1
					nvidia390_i=0
					nouveau_i=1
				break
			fi
		done
	fi
	if [[ "$nouveau_i" == 1 ]];then
		XF86_VIDEO_LIST[$i]='xf86-video-nouveau';((i++))
	else
		for f in ${nouveau[@]}
		do
			if [[ "${GPU[@]}" == *"$f"* ]];then
				XF86_VIDEO_LIST[$i]='xf86-video-nouveau';((i++))
				break
			fi
		done
	fi
	for f in ${radeon[@]}
	do
		if [[ "${GPU[@]}" == *"$f"* ]];then
			XF86_VIDEO_LIST[$i]='xf86-video-ati';((i++))
			break
		fi
	done
	for f in ${amdgpu[@]}
	do
		if [[ "${GPU[@]}" == *"$f"* ]];then
			XF86_VIDEO_LIST[$i]='xf86-video-amdgpu';((i++))
			break
		fi
	done
	if [[ "${GPU[@]}" == *"$intel"* ]];then
		XF86_VIDEO_LIST[$i]='xf86-video-intel';((i++))
	fi
	if [[ "${GPU[@]}" == *"QXL"* ]];then
		XF86_VIDEO_LIST[$i]='xf86-video-qxl';((i++))
	fi
	if [[ "${GPU[@]}" == *"SiS"* ]];then
		XF86_VIDEO_LIST[$i]='xf86-video-sisusb';((i++))
	fi
	if [[ "${#XF86_VIDEO_LIST}" == '0' ]];then
		XF86_VIDEO_LIST[$i]='xf86-video-vesa'
	fi
}
PKG_HVA_AUTO(){
	local i=0 U
	source gpu.conf
	if [[ "${XF86_VIDEO_LIST[@]}" == *"xf86-video-intel"* ]];then
		for f in "${intel_media_driver[@]}"
		do
			if [[ "${GPU[@]}" == *"$f"* ]];then
				HVA_LIST[$i]="intel-media-driver";((i++))
				if [[ "${HVA_LIST[@]}" != *"libva-vdpau-driver"* ]];then
					HVA_LIST[$i]="libva-vdpau-driver";((i++))
				fi
				break
			fi
		done
		for f in "${libva_intel_driver[@]}"
		do
			if [[ "${GPU[@]}" == *"$f"* ]];then
				HVA_LIST[$i]="libva-intel-driver";((i++))
				if [[ "${HVA_LIST[@]}" != *"libva-vdpau-driver"* ]];then
					HVA_LIST[$i]="libva-vdpau-driver";((i++))
				fi
				break
			fi
		done
	fi
	for ((Z=0; Z < "${#GPU[@]}"; Z++))
	do
		U=0
		for v in "${vdpau_not_support[@]}"
		do
			if [[ "${GPU[$Z]}" == *"$v"* ]];then
				U=1
				break
			fi
		done
		if [[ "$U" != "1" ]];then
			HVA_LIST[$i]="mesa-vdpau";((i++))
			break
		fi
	done
	for ((Z=0; Z < "${#GPU[@]}"; Z++))
	do
		U=0
		for v in "${vaapi_not_support[@]}"
		do
			if [[ "${GPU[$Z]}" == *"$v"* ]];then
				U=1
				break
			fi
		done
		if [[ "$U" != "1" ]];then
			HVA_LIST[$i]="libva-mesa-driver";((i++))
			break
		fi
	done
	if [[ "${HVA_LIST[@]}" != *"libva-vdpau-driver"* ]];then
		if [[ "$nvidia390_i" == "1" || "$nvidia_i" == "1" ]];then
			HVA_LIST[$i]="libva-vdpau-driver";((i++))
		fi
	fi
	if [[ "${HVA_LIST[@]}" != *"libva-vdpau-driver"* ]];then
		if [[ "${GPU[@]}" == *"Intel"* ]];then
			HVA_LIST[$i]="libva-vdpau-driver";((i++))
		fi
	fi
	if [[ "${HVA_LIST[@]}" != *"libvdpau-va-gl"* ]];then
		if [[ "${GPU[@]}" == *"Intel"* ]];then
			if [[ "${HVA_LIST[@]}" != *"intel-media-driver"* && "${HVA_LIST[@]}" != *"libva-intel-driver"* ]];then
				HVA_LIST[$i]="libvdpau-va-gl";((i++))
			fi
		fi
	fi
}
#---------------------------------------------------------
ECHO_PKG(){
	local pkg
	pkg=${1%-*}
	pkg=${pkg%-*}
	pkg=${pkg##*/}
	echo ${pkg%-*}
}
ECHO_VER(){
	local ver
	ver=${1%-*}
	ver=${ver%-*}
	ver=${ver##*/}
	echo ${ver##*-}
}
SET_KERNEL()
{
	local menu i=8 A
	A=`pacman -Sp linux-lts`
	if [[ $? == 0 ]];then
		menu[0]="linux-lts"
		menu[1]="`ECHO_VER ${A##*/}`"
	fi
	A=`pacman -Sp linux`
	if [[ $? == 0 ]];then
		menu[2]="linux"
		menu[3]="`ECHO_VER ${A##*/}`"
	fi
	A=`pacman -Sp linux-zen`
	if [[ $? == 0 ]];then
		menu[4]="linux-zen"
		menu[5]="`ECHO_VER ${A##*/}`"
	fi
	A=`pacman -Sp linux-hardened`
	if [[ $? == 0 ]];then
		menu[6]="linux-hardened"
		menu[7]="`ECHO_VER ${A##*/}`"
	fi
	if [ -d "$KERNEL_DIR" ]; then
		KERNEL=( `find "$KERNEL_DIR" -maxdepth 1 -name "*.pkg.*" -not -name "*-headers*" -type f -printf "%f\n"` )
		for f in ${KERNEL[@]}
		do
			menu[i]="`ECHO_PKG "$f"`";((i++))
			menu[i]="`ECHO_VER "$f"`";((i++))
		done
	fi
	L 3 ${#menu[@]}
	KERNEL=$($INTERFACE --backtitle "$BACKTITLE" --title "$set_kernel" --menu "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
}
#---------------------------------------------------------
SET_GPU(){
	local xf86_video_list=( `pacman -Ssq xf86-video` ) menu i=3 A
	menu[0]="NVIDIA";
	if [[ "$nvidia_i" == 1 ]];then
		A="`pacman -Sp nvidia | grep nvidia`"
		menu[1]="`ECHO_VER $A`"
		menu[2]="on"
	else
		if [[ "$nvidia390_i" == 1 ]];then
			A="`pacman -Sp nvidia-390xx | grep nvidia`"
			menu[1]="`ECHO_VER $A`"
			menu[2]="on"
		else
			A="`pacman -Sp nvidia | grep nvidia`"
			menu[1]="`ECHO_VER $A`"
			menu[2]="off"
		fi
	fi
	A=( `pacman -Sp ${xf86_video_list[@]}` )
	for ((I=0; I < "${#xf86_video_list[@]}"; I++))
	do
		menu[$i]="${xf86_video_list[$I]}";((i++))
		menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
		if [[ "${XF86_VIDEO_LIST[@]}" != *"${xf86_video_list[$I]}"* ]];then
			menu[$i]="off";((i++))
		else
			menu[$i]="on";((i++))
		fi
	done
	Lc 3 ${#menu[@]}
	XF86_VIDEO_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
	for ((I=0; I < "${#XF86_VIDEO_LIST[@]}"; I++))
	do
		if [[ "${XF86_VIDEO_LIST[$I]}" == NVIDIA ]];then
			SET_GPU_NVIDIA "$I"
		fi
	done
}
SET_GPU_NVIDIA(){
	local menu A="`pacman -Sp nvidia | grep nvidia`"
	menu[0]="nvidia"
	menu[1]="`ECHO_VER $A`"
	A="`pacman -Sp nvidia-390xx | grep nvidia`"
	menu[2]="nvidia-390xx"
	menu[3]="`ECHO_VER $A`"
	M=$($INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --menu "" 0 0 1 "${menu[@]}" 3>&1 1>&2 2>&3); EXITmenu $?
	if [[ $? == 0 ]];then
		case $M in
			nvidia)
				nvidia390_i=0
				nvidia_i=1
			;;
			nvidia-390xx)
				nvidia390_i=1
				nvidia_i=0
			;;
		esac
	else
		nvidia390_i=0
		nvidia_i=0
	fi
	unset XF86_VIDEO_LIST[$I]
}
#---------------------------------------------------------
SET_FONTS(){
	local list=( `pacman -Ssq ttf-` ) menu i=0 A
	A=( `pacman -Sp ${list[@]}` )
	for ((I=0; I < "${#list[@]}"; I++))
	do
		menu[$i]="${list[$I]}";((i++))
		menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
		menu[$i]="off"
		for f in ${FONT_LIST[@]}
		do
			if [[ "$f" == "${list[$I]}" ]];then
				menu[$i]="on";
				break
			fi
		done
		((i++))
	done
	Lc 3 ${#menu[@]}
	FONT_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
#---------------------------------------------------------
SET_XCURSOR(){
	local list=( `pacman -Ssq xcursors-` `pacman -Ssq xcursor-` ) menu i=0 A
	A=( `pacman -Sp ${list[@]}` )
	for ((I=0; I < "${#list[@]}"; I++))
	do
		menu[$i]="${list[$I]}";((i++))
		menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
		menu[$i]="off"
		for f in ${XCURSOR_LIST[@]}
		do
			if [[ "$f" == "${list[$I]}" ]];then
				menu[$i]="on";
				break
			fi
		done
		((i++))
	done
	Lc 3 ${#menu[@]}
	XCURSOR_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
#---------------------------------------------------------
SET_ICON(){
	local list=( `pacman -Ssq icon-theme` ) menu i=0 A
	A=( `pacman -Sp ${list[@]}` )
	for ((I=0; I < "${#list[@]}"; I++))
	do
		menu[$i]="${list[$I]}";((i++))
		menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
		menu[$i]="off"
		for f in ${ICON_LIST[@]}
		do
			if [[ "$f" == "${list[$I]}" ]];then
				menu[$i]="on";
				break
			fi
		done
		((i++))
	done
	Lc 3 ${#menu[@]}
	ICON_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
#---------------------------------------------------------
SET_THEME(){
	local menu i=0 A
	for v in ${theme_list[@]}
	do
		for f in ${all[@]}
		do
			if [[ "$v" == "$f" ]];then
				menu[$i]="$v";((i++))
				A=( `pacman -Sp $v` )
				menu[$i]="`ECHO_VER $A`";((i++))
				menu[$i]="off"
				for r in ${THEME_LIST[@]}
				do
					if [[ "$v" == "$r" ]];then
						menu[$i]="on"
						break
					fi
				done
				((i++))
				break
			fi
		done
	done
	Lc 3 ${#menu[@]}
	THEME_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
#---------------------------------------------------------
SET_LXDE(){
	local list=( `pacman -Sgq lxde` ) menu i=0 A
	A=( `pacman -Sp ${list[@]}` )
	for ((I=0; I < "${#list[@]}"; I++))
	do
		menu[$i]="${list[$I]}";((i++))
		menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
		menu[$i]="off"
		for f in ${LXDE_LIST[@]}
		do
			if [[ "$f" == "${list[$I]}" ]];then
				menu[$i]="on";
				break
			fi
		done
		((i++))
	done
	Lc 3 ${#menu[@]}
	LXDE_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}

SET_XFCE4(){
	local list=( `pacman -Sgq xfce4 xfce4-goodies` ) menu i=0 A
	A=( `pacman -Sp ${list[@]}` )
	for ((I=0; I < "${#list[@]}"; I++))
	do
		menu[$i]="${list[$I]}";((i++))
		menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
		menu[$i]="off"
		for f in ${XFCE4_LIST[@]}
		do
			if [[ "$f" == "${list[$I]}" ]];then
				menu[$i]="on";
				break
			fi
		done
		((i++))
	done
	Lc 3 ${#menu[@]}
	XFCE4_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title " Пыщ пыщ " --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
SET_GNOME(){
	local list=( `pacman -Sgq gnome` ) menu i=0 A
	A=( `pacman -Sp ${list[@]}` )
	for ((I=0; I < "${#list[@]}"; I++))
	do
		menu[$i]="${list[$I]}";((i++))
		menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
		menu[$i]="off"
		for f in ${GNOME_LIST[@]}
		do
			if [[ "$f" == "${list[$I]}" ]];then
				menu[$i]="on";
				break
			fi
		done
		((i++))
	done
	Lc 3 ${#menu[@]}
	GNOME_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
SET_DEEPIN(){
	local list=( `pacman -Sgq deepin deepin-extra` ) menu i=0 A
	A=( `pacman -Sp ${list[@]}` )
	for ((I=0; I < "${#list[@]}"; I++))
	do
		menu[$i]="${list[$I]}";((i++))
		menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
		menu[$i]="off"
		for f in ${DEEPIN_LIST[@]}
		do
			if [[ "$f" == "${list[$I]}" ]];then
				menu[$i]="on";
				break
			fi
		done
		((i++))
	done
	Lc 3 ${#menu[@]}
	DEEPIN_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
SET_KDE(){
	local list=( `pacman -Sgq plasma kde-applications` ) menu i=0 A
	A=( `pacman -Sp ${list[@]}` )
	for ((I=0; I < "${#list[@]}"; I++))
	do
		menu[$i]="${list[$I]}";((i++))
		menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
		menu[$i]="off"
		for f in ${KDE_LIST[@]}
		do
			if [[ "$f" == "${list[$I]}" ]];then
				menu[$i]="on";
				break
			fi
		done
		((i++))
	done
	Lc 3 ${#menu[@]}
	KDE_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
SET_LXQT(){
	local list=( `pacman -Sgq lxqt` xdg-utils xautolock ) menu i=0 A
	A=( `pacman -Sp ${list[@]}` )
	for ((I=0; I < "${#list[@]}"; I++))
	do
		menu[$i]="${list[$I]}";((i++))
		menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
		menu[$i]="off"
		for f in ${LXQT_LIST[@]}
		do
			if [[ "$f" == "${list[$I]}" ]];then
				menu[$i]="on";
				break
			fi
		done
		((i++))
	done
	Lc 3 ${#menu[@]}
	LXQT_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
SET_MATE(){
	local list=( `pacman -Sgq mate mate-extra` mate-applet-dock mate-applet-streamer ) menu i=0 A
	A=( `pacman -Sp ${list[@]}` )
	for ((I=0; I < "${#list[@]}"; I++))
	do
		menu[$i]="${list[$I]}";((i++))
		menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
		menu[$i]="off"
		for f in ${MATE_LIST[@]}
		do
			if [[ "$f" == "${list[$I]}" ]];then
				menu[$i]="on";
				break
			fi
		done
		((i++))
	done
	Lc 3 ${#menu[@]}
	MATE_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
SET_VIDEO(){
	local menu i=0 I=0 A=( `pacman -Sp ${video_list[@]}` )
	for v in ${video_list[@]}
	do
		((I++))
		for f in ${all[@]}
		do
			if [[ "$v" == "$f" ]];then
				menu[$i]="$v";((i++))
				menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
				menu[$i]="off"
				for r in ${VIDEO_LIST[@]}
				do
					if [[ "$v" == "$r" ]];then
						menu[$i]="on"
						break
					fi
				done
				((i++))
				break
			fi
		done
	done
	Lc 3 ${#menu[@]}
	VIDEO_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
SET_AUDIO(){
	local menu i=0 I=0 A=( `pacman -Sp ${audio_list[@]}` )
	for v in ${audio_list[@]}
	do
		((I++))
		for f in ${all[@]}
		do
			if [[ "$v" == "$f" ]];then
				menu[$i]="$v";((i++))
				menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
				menu[$i]="off"
				for r in ${AUDIO_LIST[@]}
				do
					if [[ "$v" == "$r" ]];then
						menu[$i]="on"
						break
					fi
				done
				((i++))
				break
			fi
		done
	done
	Lc 3 ${#menu[@]}
	AUDIO_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
SET_HVA()
{
	local menu i=0 I=0 A=( `pacman -Sp ${audio_list[@]}` )
	for v in ${audio_list[@]}
	do
		((I++))
		for f in ${all[@]}
		do
			if [[ "$v" == "$f" ]];then
				menu[$i]="$v";((i++))
				menu[$i]="`ECHO_VER ${A[$I]}`";((i++))
				menu[$i]="off"
				for r in ${AUDIO_LIST[@]}
				do
					if [[ "$v" == "$r" ]];then
						menu[$i]="on"
						break
					fi
				done
				((i++))
				break
			fi
		done
	done
	Lc 3 ${#menu[@]}
	AUDIO_LIST=( `$INTERFACE --backtitle "$BACKTITLE" --title "$set_video_list" --clear --checklist "" 0 0 $L "${menu[@]}" 3>&1 1>&2 2>&3` ); EXITmenu $?
}
#---------------------------------------------------------